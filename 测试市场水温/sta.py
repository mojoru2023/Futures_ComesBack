import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import pandas as pd
import time

print(time.strftime('%Y-%m-%D %H:%M:%S'))

# 日经2年日内开盘-收盘的水温测试
# 20%都是十字星。所以这种是绝对无效的市场。
# 剩下也就210个交易日。拿下50%也就是100个交易日就算比较成功了。

# 根据均值、标准差,求指定范围的正态分布概率值
def _normfun(x, mu, sigma):
    pdf = np.exp(-((x - mu) ** 2) / (2 * sigma ** 2)) / (sigma * np.sqrt(2 * np.pi))
    return pdf


# 求列表数据的异常点
def get_outer_data(data_list):
    df = pd.DataFrame(data_list, columns=['value'])
    df = df.iloc[:, 0]
    # 计算下四分位数和上四分位
    Q1 = df.quantile(q=0.25)
    Q3 = df.quantile(q=0.75)

    # 基于1.5倍的四分位差计算上下须对应的值
    low_whisker = Q1 - 1.5 * (Q3 - Q1)
    up_whisker = Q3 + 1.5 * (Q3 - Q1)

    # 寻找异常点
    kk = df[(df > up_whisker) | (df < low_whisker)]
    data1 = pd.DataFrame({'id': kk.index, '异常值': kk})
    return data1



result_list = [42,276.610000000001,166.119999999999,80.1800000000003,33.7299999999996,257.290000000001,10.1000000000022,290.799999999999,32.4799999999996,84.380000000001,104.52,206.32,508.850000000002,196.32,168.259999999998,18.0399999999972,385.98,219.27,32.5699999999997,417.620000000003,73.4900000000016,43.0999999999985,101.700000000001,92.5400000000009,293.920000000002,7.05999999999767,111.400000000001,31.7400000000016,160.709999999999,246.360000000001,407.43,271.889999999999,56.0799999999981,111.25,143.849999999999,183.580000000002,177.959999999999,50.8199999999997,41.869999999999,11.4599999999991,223.549999999999,78.989999999998,140.190000000002,188.970000000001,416.619999999999,433.369999999999,132.790000000001,177.93,482.509999999998,187.109999999997,117.950000000001,30.7900000000009,332.25,581.93,158.960000000003,183.399999999998,412.68,436.379999999997,51.5999999999985,139.170000000002,7.97999999999956,69.2999999999993,263.299999999999,310.529999999999,65.8400000000001,139.289999999997,226.91,198.549999999999,191.350000000002,318.370000000003,226.329999999998,122.019999999997,91.2199999999975,33.7799999999988,78.760000000002,344.09,89.6499999999978,230.609999999997,88.6599999999999,311.380000000001,287.490000000002,969.580000000002,94.6499999999978,335.48,329.919999999998,117.899999999998,371.5,461.66,194.09,0.799999999999272,122.710000000003,169.09,316.130000000001,158.420000000002,232.969999999998,648.880000000001,43.3600000000006,203.380000000001,2.53000000000247,88.8499999999985,115.84,109.870000000003,53.4599999999991,95.3600000000006,51.8500000000022,207.990000000002,387.649999999998,308.919999999998,197.950000000001,101.25,122.220000000001,64.7699999999968,104.73,101.849999999999,67.7299999999996,316.779999999999,142.59,188.52,37.1699999999983,68.8899999999994,789.970000000001,54.0400000000009,572.850000000002,29.6299999999974,360.790000000001,155.560000000001,104.82,0.729999999999563,218.349999999999,58.4099999999999,30.5699999999997,228.52,231.670000000002,102.280000000002,272.09,228.400000000001,229.16,65.3700000000026,58.5,316.400000000001,73.5299999999988,51.5200000000004,42.2300000000032,178.399999999998,73.2799999999988,226.32,444.16,130.400000000001,98.2400000000016,68.3600000000006,281.370000000003,286.52,54.8400000000001,228.27,520.630000000001,17.5699999999997,12.239999999998,505.040000000001,228.27,599.580000000002,464.040000000001,116.529999999999,67.6299999999974,41.5799999999981,37.7599999999984,107.200000000001,105.329999999998,181.540000000001,112.509999999998,282.810000000001,47.5400000000009,85.3299999999981,75.3499999999985,292.389999999999,48.9799999999996,361.66,32.2200000000012,158.669999999998,501.630000000001,21.0499999999993,271.98,398.77,78.3099999999977,59.8999999999978,51.3400000000001,43.3300000000017,78.869999999999,301.140000000003,225.200000000001,117.410000000003,167.829999999998,242.469999999998,282.920000000002,61.8099999999977,162.18,24.6699999999983,1.12000000000262,110.82,201.450000000001,28.8199999999997,61.8000000000029,287.700000000001,394.299999999999,59.8099999999977,93.3300000000017,58.2900000000009,157.18,199.060000000001,36.3600000000006,10.6599999999999,36.1799999999967,260.23,91.1800000000003,4.42000000000189,156.32,201,214.600000000002,104.549999999999,34.7400000000016,111.380000000001,64.0399999999972,125.369999999999,104.780000000002,114.829999999998,64.6399999999994,71.119999999999,63.4099999999999,12.0299999999988,371.060000000001,495.91,172.66,131.009999999998,15.130000000001,185.27,8.68999999999869,81.3100000000013,158.82,40.760000000002,82.4699999999975,194.759999999998,40.1000000000022,167.720000000001,215.329999999998,184.310000000001,159.369999999999,236.869999999999,5.68999999999869,245.57,36.989999999998,152.290000000001,48.2200000000012,222.75,13.2299999999996,475.27,485.629999999997,360.77,481,564.59,629.970000000001,141.450000000001,27.369999999999,307.360000000001,184.029999999999,118.460000000003,182.639999999999,30.739999999998,81.510000000002,307.389999999999,151.810000000001,255.489999999998,2.95000000000073,105.710000000003,68.7899999999972,97.0699999999997,145.920000000002,335.700000000001,97.4699999999975,33.0999999999985,12.6899999999987,512.259999999998,4.63999999999942,149.34,53.0400000000009,99.5300000000025,67.6599999999999,93.5999999999985,108.18,272.549999999999,360.029999999999,385.570000000003,269.949999999997,112.52,68.2700000000004,77.5,150.700000000001,37.5299999999988,430.09,177.720000000001,81.7199999999975,279.07,464.939999999999,138.84,268.309999999998,76.9799999999996,531.580000000002,244.049999999999,787.720000000001,91,348.41,125.75,47.3299999999981,75.8899999999994,74.630000000001,238.290000000001,421.740000000002,115.810000000001,150.380000000001,70.3199999999997,556.919999999998,147.73,215.509999999998,163.790000000001,154.689999999999,441.98,657.330000000002,28.1499999999978,30.130000000001,150.119999999999,123.400000000001,51.25,46.4500000000007,275.480000000003,227.969999999998,3.52999999999884,258.290000000001,255.529999999999,316.490000000002,159.970000000001,418.889999999999,149.670000000002,46.9099999999999,7.25,317.189999999999,114.93,631.77,162.739999999998,51.489999999998,33.239999999998,55.6399999999994,122.940000000002,119.68,12.1399999999994,62.1699999999983,78.1899999999987,4.72999999999956,72.9099999999999,80.3299999999981,67.7400000000016,291.599999999999,86.760000000002,346.810000000001,53.9800000000032,69.0699999999997,84.010000000002,163.34,396.48,114.43,281.84,171.66,264.139999999999,40.5399999999972,5.61000000000058,132.41,28.8300000000017,254.240000000002,19.7700000000004,81.5300000000025,203.939999999999,181.709999999999,271,249.009999999998,329.079999999998,75.6499999999978,184.739999999998,343.579999999998,161.18,45.8999999999978,108.84,26.4399999999987,42.119999999999,51.3199999999997,23.9399999999987,20.8299999999981,127.440000000002,67.7700000000004,41.2200000000012,81.0699999999997,66.1200000000026,30.0500000000029,94.1700000000019,140.73,150.369999999999,13.6599999999999,57.8600000000006,264.899999999998,0,293.73,128.599999999999,119.66,12.7100000000028,127.18,100.600000000002,39.1100000000006,97.25,50.2999999999993,16.0599999999977,128.139999999999,291.860000000001,42,65.6500000000015,85.3400000000001,55.5200000000004,75.1100000000006,58.9600000000028,13.9399999999987,48.4399999999987,7.38000000000102,349.649999999998,102.18,33.8100000000013,54.0299999999988,72.3099999999977,102.459999999999,122.960000000003,112.68,46.7199999999975,92.7299999999996,34.5599999999977,126.25,96.5200000000004,244.730000000003,103.84,53.5599999999977,35.1299999999974,193.919999999998,247.799999999999,557.59,150.010000000002,146.779999999999,77.6399999999994,219.899999999998,40.1399999999994,94.8400000000001,54.5900000000001,111.150000000001,137.599999999999,127.59,44.8600000000006,192.93,244.16,86.9900000000016,42.9599999999991,35.2100000000028,373.169999999998,39.5699999999997,36.7200000000012,216.57,46.9599999999991,260.009999999998,87.7100000000028,28.0799999999981,6.68999999999869,87.010000000002,83.5800000000017,36.9599999999991,8.42000000000189,61.380000000001,669.919999999998,604.32,223.360000000001,375.110000000001,185.950000000001,44.760000000002,56.119999999999,250.649999999998,189.399999999998,35.25,150.09,151.5,70.2599999999984,303.41,169.919999999998,343.209999999999,88.2400000000016,195.790000000001,140.279999999999,140.66,36.0699999999997,36.1100000000006,112.32,225.710000000003,126.130000000001,46.75,56.9300000000003,207,206.25]

result = np.array(result_list)
mean, std = result.mean(), result.std(ddof=1)  # 求均值和标准差
# 计算置信区间,这里的0.9是置信水平
if std == 0:  # 如果所有值都相同即标准差为0则无法计算置信区间
    conf_intveral = [min(result) - 1, max(result) + 1]
else:
    conf_intveral = stats.norm.interval(0.9, loc=mean, scale=std)  # 90%概率
# print('置信区间:', conf_intveral)
# 求异常值
outer = get_outer_data(result)
# 绘制离散图
fig = plt.figure()
fig.add_subplot(2, 1, 1)
plt.subplots_adjust(hspace=0.3)
x = np.arange(0, len(result), 1)
plt.scatter(x, result, marker='.', color='g')  # 画所有离散点
plt.scatter(outer.iloc[:, 0], outer.iloc[:, 1], marker='x', color='r')  # 画异常离散点
plt.plot([0, len(result)], [conf_intveral[0], conf_intveral[0]])  # 置信区间线条
plt.plot([0, len(result)], [conf_intveral[1], conf_intveral[1]])  # 置信区间线条
plt.text(0, conf_intveral[0], '{:.2f}'.format(conf_intveral[0]))  # 置信区间数字显示
plt.text(0, conf_intveral[1], '{:.2f}'.format(conf_intveral[1]))  # 置信区间数字显示
info = 'outer count:{}'.format(len(outer.iloc[:, 0]))
plt.text(min(x), max(result) - ((max(result) - min(result)) / 2), info)  # 异常点数显示
plt.xlabel('sample count')
plt.ylabel('value')
# 绘制概率图
if std != 0:  # 如果所有取值都相同
    fig.add_subplot(2, 1, 2)
    x = np.arange(min(result), max(result), 0.1)
    y = _normfun(x, result.mean(), result.std())
    plt.plot(x, y)  # 这里画出理论的正态分布概率曲线
    plt.hist(result, bins=10, rwidth=0.9, density=True)  # bins个柱状图,宽度是rwidth(0~1),=1没有缝隙
    info = 'mean:{:.2f}\nstd:{:.2f}\nmode num:{:.2f}'.format(mean, std, np.median(result))
    plt.text(min(x), max(y) / 2, info)
    plt.xlabel('nikki225 daily V 2020.5-2022.5')
    plt.ylabel('Probability')
else:
    fig.add_subplot(2, 1, 2)
    info = 'non-normal distribution!!\nmean:{:.2f}\nstd:{:.2f}\nmode num:{:.2f}'.format(mean, std, np.median(result))
    plt.text(0.5, 0.5, info)
    plt.xlabel('nikki225 daily V 2020.5-2022.5')
    plt.ylabel('Probability')
plt.savefig('./distribution.jpg')
plt.show()

print(time.strftime('%Y-%m-%D %H:%M:%S'))
